---
import { Image } from 'astro:assets';
import cloudIcon from '/src/assets/cloud.svg';
const allLogosObj = import.meta.glob('/src/assets/skills/*.svg');
const logoPaths = Object.keys(allLogosObj).sort();
const logos = logoPaths.map((path) => allLogosObj[path]);

// Distribuir 24 imágenes: 1 centro, 7 inner, 8 middle, 8 outer
const innerLogos = logos.slice(0, 7);
const middleLogos = logos.slice(7, 15);
const outerLogos = logos.slice(15, 23);

// Utilidad para cargar el logo (import.meta.glob devuelve función async)
async function getLogoSrc(logoImport: () => Promise<any>) {
  const mod = await logoImport();
  return mod.default;
}
---
<div class="relative size-[24rem;]">
  {/* Central core */}
  <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-20 h-20 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center shadow-2xl shadow-blue-500/50 animate-pulse-glow">
    <Image src={cloudIcon} alt="Cloud" class="w-12 h-12" />
  </div>

  {/* Orbit Ring 1 - Inner (7 logos) */}
  <div class="absolute top-1/2 left-1/2 w-44 h-44 -translate-x-1/2 -translate-y-1/2 border border-[#c7a8ff]/70 rounded-full animate-spin-slow">
    {await Promise.all(innerLogos.map(async (logoImport, i) => {
      const angle = (360 / innerLogos.length) * i;
      const src = await getLogoSrc(logoImport);
      return (
        <div style={{
          position: 'absolute',
          left: `calc(50% + 80px * cos(${angle}deg) - 12px)`,
          top: `calc(50% + 80px * sin(${angle}deg) - 12px)`
        }} class="w-6 h-6 rounded-full flex items-center justify-center bg-cyan-300/30 shadow animate-counter-spin-slow">
          <Image src={src} alt={`Tech logo inner ${i+1}`} class="w-5 h-5" />
        </div>
      );
    }))}
  </div>

  {/* Orbit Ring 2 - Middle (8 logos) */}
  <div class="absolute top-1/2 left-1/2 w-64 h-64 -translate-x-1/2 -translate-y-1/2 border border-[#c7a8ff]/70 rounded-full animate-spin-reverse">
    {await Promise.all(middleLogos.map(async (logoImport, i) => {
      const angle = (360 / middleLogos.length) * i;
      const src = await getLogoSrc(logoImport);
      return (
        <div style={{
          position: 'absolute',
          left: `calc(50% + 120px * cos(${angle}deg) - 16px)`,
          top: `calc(50% + 120px * sin(${angle}deg) - 16px)`
        }} class="w-8 h-8 rounded-full flex items-center justify-center bg-cyan-300/30 shadow animate-counter-spin-reverse">
          <Image src={src} alt={`Tech logo middle ${i+1}`} class="w-6 h-6" />
        </div>
      );
    }))}
  </div>

  {/* Orbit Ring 3 - Outer (8 logos) */}
  <div class="absolute top-1/2 left-1/2 w-80 h-80 -translate-x-1/2 -translate-y-1/2 border border-[#c7a8ff]/70 rounded-full animate-spin-slower hidden xl:block">
    {await Promise.all(outerLogos.map(async (logoImport, i) => {
      const angle = (360 / outerLogos.length) * i;
      const src = await getLogoSrc(logoImport);
      return (
        <div style={{
          position: 'absolute',
          left: `calc(50% + 160px * cos(${angle}deg) - 16px)`,
          top: `calc(50% + 160px * sin(${angle}deg) - 16px)`
        }} class="w-8 h-8 rounded-full flex items-center justify-center bg-cyan-300/30 shadow animate-counter-spin-slower">
          <Image src={src} alt={`Tech logo outer ${i+1}`} class="w-6 h-6" />
        </div>
      );
    }))}
  </div>

  {/* Connecting lines/particles */}
  <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-2 h-2 bg-blue-400 rounded-full animate-ping"></div>
  <div
    class="absolute top-1/3 left-2/3 w-1 h-1 bg-cyan-400 rounded-full animate-ping"
    style={{ animationDelay: "1s" }}
  ></div>
  <div
    class="absolute bottom-1/3 right-1/3 w-1 h-1 bg-purple-400 rounded-full animate-ping"
    style={{ animationDelay: "2s" }}
  ></div>
</div>

<style >
  @keyframes spin-slow {
    from { transform: translate(-50%, -50%) rotate(0deg); }
    to { transform: translate(-50%, -50%) rotate(360deg); }
  }
  
  @keyframes spin-reverse {
    from { transform: translate(-50%, -50%) rotate(0deg); }
    to { transform: translate(-50%, -50%) rotate(-360deg); }
  }
  
  @keyframes spin-slower {
    from { transform: translate(-50%, -50%) rotate(0deg); }
    to { transform: translate(-50%, -50%) rotate(360deg); }
  }
  
  @keyframes counter-spin-slow {
    from { transform: rotate(0deg); }
    to { transform: rotate(-360deg); }
  }
  
  @keyframes counter-spin-reverse {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  @keyframes counter-spin-slower {
    from { transform: rotate(0deg); }
    to { transform: rotate(-360deg); }
  }
  
  @keyframes pulse-slow {
    0%, 100% { opacity: 0.3; transform: scale(1); }
    50% { opacity: 0.6; transform: scale(1.05); }
  }
  
  @keyframes pulse-delayed {
    0%, 100% { opacity: 0.2; transform: scale(1); }
    50% { opacity: 0.5; transform: scale(1.1); }
  }
  
  @keyframes pulse-glow {
    0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.5); }
    50% { box-shadow: 0 0 40px rgba(59, 130, 246, 0.8), 0 0 60px rgba(6, 182, 212, 0.3); }
  }
  
  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  .animate-spin-slow {
    animation: spin-slow 20s linear infinite;
  }
  
  .animate-spin-reverse {
    animation: spin-reverse 30s linear infinite;
  }
  
  .animate-spin-slower {
    animation: spin-slower 40s linear infinite;
  }
  
  .animate-counter-spin-slow {
    animation: counter-spin-slow 20s linear infinite;
  }
  
  .animate-counter-spin-reverse {
    animation: counter-spin-reverse 30s linear infinite;
  }
  
  .animate-counter-spin-slower {
    animation: counter-spin-slower 40s linear infinite;
  }
  
  .animate-pulse-slow {
    animation: pulse-slow 4s ease-in-out infinite;
  }
  
  .animate-pulse-delayed {
    animation: pulse-delayed 5s ease-in-out infinite 1s;
  }
  
  .animate-pulse-glow {
    animation: pulse-glow 3s ease-in-out infinite;
  }
  
  .animate-gradient {
    background-size: 200% 200%;
    animation: gradient 3s ease infinite;
  }
</style>